一、回顾
1、JVM：字节码解释器，虚拟机将字节码解释成机器码给CPU执行

2、计算机运行一个JAVA程序的过程

3、java跨平台原理
    Windows下c++语言编译过程	  Java语言编译过程
	c++源程序		         Java源程序
	     |				|
	     |				|
	目标码			    Java字节码文件	
	     |				|
	     |				|
       Windows可执行文件		      JVM虚拟机
	     |		(Windows下的Java字节码解释程序)
	     |		    (Linux下的Java字节码解释程序)		  
	     |				|
	     |				|
       Windows操作系统		Windows操作系统
			                     Linux操作系统

4、垃圾回收器

5、第一个程序
Java中的程序必须以类的形式存在，一个类必须要main方法才能被解释器直接运行

6、正负数在内存空间中的存放
源码-------反码----------补码

7、基本数据类型之间转换
	正向过程（自动类型提升、隐式转换）：
		byte->short->int->long->float->double
	逆向过程：int a = (int)3.14;
		数据类型 变量名=（数据类型）转换的值；

8、转义字符 
\r回车
\t制表符   
\b退格  
\"双引号   
 \'单引号    
\n换行
\\斜杠"\"


9、运算符
算术运算符：++、--
赋值运算符：+= 
比较运算符：== 
逻辑运算符：&与&&   ||与|
位运算符：&、|、^
移位运算符（适用数据类型）：byte\short\int\long
左移：<<
右移：>>
01010101>>2
00110101
无符号右移：>>>
int a = 5; 
b=a<<33;


10、数据类型
基本数据类型（数值型、字符型、布尔型）
float f =3.14;
byte b = 200;
short a = 10;
a = (a-3);
引用数据类型（类、接口、数组）

11、变量
变量作用域
变量初始化

12、流程控制语句
两路分支选择
多路分支选择switch(char\byte\short\int)
循环结构for(初始化;条件;调整) 
循环标号


二、数组
一维数组：
数组的声明：int  a[]; 
数组的实例化：a  = new int[7];
a.length
数组的赋值：
数组的遍历：

二维数组：
声明：int arr[][];
实例化：arr = new int[2][3];
int arr[][] = {{1,3,5},{7},{9,8}};
赋值：arr[0][0]
遍历：

数组的拷贝方法（直接赋值与数组拷贝区别）
数组的排序


三、类
类的概念
类的定义
类的成员
属性定义
java文件与java类


四、方法
方法定义
方法调用的过程: 
1.分配临时空间
2.将实参的值传递给形参
3.程序流程转到被调用方法体内
4.遇到return语句，方法执行完毕
5.关闭临时空间

方法的匹配
1.参数列表的匹配
2.返回类型的匹配

值传递
引用传递
构造方法
this关键字：区分全局变量与局部变量
生成对象步骤：
private与public访问权限控制修饰符

五、面向过程与面向对象
抽象什么
数据类型
业务逻辑：方法和行为
OOP
OOD
OOA

六、封装























