一、java中的图形界面

GUI，图形化的用户接口，为了人机交互使用的。

BS与CS的联系与区别。
C/S是Client/Server的缩写。服务器通常采用高性能的PC、工作站或小型机，并采用大型数据库系统，如Oracle、Sybase、Informix或 SQL Server。客户端需要安装专用的客户端软件。
B/Ｓ是Brower/Server的缩写，客户机上只要安装一个浏览器（Browser），如Netscape Navigator或Internet Explorer，服务器安装Oracle、Sybase、Informix或 SQL Server等数据库。
在这种结构下，用户界面完全通过WWW浏览器实现，一部分事务逻辑在前端实现，但是主要事务逻辑在服务器端实现。浏览器通过Ｗeb Server 同数据库进行数据交互。
C/S 与 B/S 区别： 
１．硬件环境不同: 
　　C/S 一般建立在专用的网络上, 小范围里的网络环境, 局域网之间再通过专门服务器提供连接和数据交换服务.
　　B/S 建立在广域网之上的, 不必是专门的网络硬件环境,例与电话上网, 租用设备. 信息自己管理. 有比C/S更强的适应范围, 一般只要有操作系统和浏览器就行 
２．对安全要求不同 
　　C/S 一般面向相对固定的用户群, 对信息安全的控制能力很强. 一般高度机密的信息系统采用C/S 结构适宜. 可以通过B/S发布部分可公开信息.
　　B/S 建立在广域网之上, 对安全的控制能力相对弱, 可能面向不可知的用户。
３．对程序架构不同 
　　C/S 程序可以更加注重流程, 可以对权限多层次校验, 对系统运行速度可以较少考虑.
　　B/S 对安全以及访问速度的多重的考虑, 建立在需要更加优化的基础之上. 比C/S有更高的要求 B/S结构的程序架构是发展的趋势, 从MS的.Net系列的BizTalk 2000 Exchange 2000等, 
     全面支持网络的构件搭建的系统. SUN 和IBM推的JavaBean 构件技术等,使 B/S更加成熟. 
４．软件重用不同 
　　C/S 程序可以不可避免的整体性考虑, 构件的重用性不如在B/S要求下的构件的重用性好.
　　B/S 对的多重结构,要求构件相对独立的功能. 能够相对较好的重用.就入买来的餐桌可以再利用,而不是做在墙上的石头桌子 
５．系统维护不同? 
　　C/S 程序由于整体性, 必须整体考察, 处理出现的问题以及系统升级. 升级难. 可能是再做一个全新的系统
　　B/S 构件组成,方面构件个别的更换,实现系统的无缝升级. 系统维护开销减到最小.用户从网上自己下载安装就可以实现升级. 
６．处理问题不同 
　　C/S 程序可以处理用户面固定, 并且在相同区域, 安全要求高需求, 与操作系统相关. 应该都是相同的系统
　　B/S 建立在广域网上, 面向不同的用户群, 分散地域, 这是C/S无法作到的. 与操作系统平台关系最小. 
７．用户接口不同 
　　C/S 多是建立的Window平台上,表现方法有限,对程序员普遍要求较高
　　B/S 建立在浏览器上, 有更加丰富和生动的表现方式与用户交流. 并且大部分难度减低,减低开发成本. 
８．信息流不同 
　　C/S 程序一般是典型的中央集权的机械式处理, 交互性相对低
　　B/S 信息流向可变化, B-B B-C B-G等信息、流向的变化, 更像交易中心。


二、
java.awt.*
javax.swing.*
步骤： 
1、选择容器。广义的组件包括单一组件和容器。
2、设置布局管理器
3、添加组件
4、添加事件处理的代码
Window：窗口。有标题栏，边框，能够独立存在。一般作为应用程序的顶层容器。
JFrame，这是一个最顶层的窗体容器，所有其他的组件必须放在顶层容器里。
	JFrame frame = new JFrame("Hello Swing");  //创建窗体，字		符串为窗体的标题
   	frame.setSize(500,300);  //设置窗口大小，500像素长，300	像素高
  	 frame.setVisible(true);  //设置可见性
JPanel，不是顶层容器，必须放在顶层容器中，任何一个容器都有	add()方法，Panel面板是透明的（默认）。他也是一个组件。
JDialog 对话框容器，要依附于其父组件，他不是一个顶层容器。


布局管理：对于任何一个容器类中都有setLayout()方法，用容器对象调用这个方法，来设置容器的布局管理器（LayoutManager这是一个接口，所有布局管理器都实现了这个接口）。

可用的布局管理器：
所有的布局管理器实现了一个接口java.awt.LayoutManager
FlowLayout，流式布局管理器。尝试在一行中按增加顺序摆放组件，窗体大改变时，组件位置会相应发生改变
    Panel的默认布局管理就是FlowLayout。
    FlowLayout flow = new FlowLayout();
     frame.setLayout(flow);

BorderLayout，按方位进行布局管理，（North，South，East，West，Center）不明确指定，就会默认加载在中间（Center），每个。分只能放一个组件
    frame.add(Component comp,String place)；这个方法是在指定的位置添加组件。
    JFrame的默认布局管理器BorderLayout。

GridLayout，网格布局，通过行列，间距，来用网格分割，把组件放入如网格中，先行后列摆放组件。可以保证每个组件的大小都是一样的
    frame.setLayout(new GirdLayout(3,2));  //把容器平均的分为3行2列，先左后右，先上到下的顺序排列
CardLayout，卡片布局，组件重叠放置。
GridBagLayout，组件可以跨行跨列的网格布局。


JButton ：按钮
JTextField：单行文本域
JTextArea：多行文本区
JPasswordField：密码输入框
JLabel：标签


三、awt事件模型（观察者模式）（重点）

事件模型中，包括事件源对象，事件处理者（事件监听者对象），事件对象。
                  事件对象
事件源――――――――〉事件处理者（事件监听器）

这就是事件模型的机制，也就是由事件源对象发送一个消息（事件对象），然后事件处理者调用相应的方法处理事件。

1一个事件源可能抛出多种不同性质的事件，多种不同性质的事件可以分别注册不同的监听器去处理。
2一个事件源抛出的同一类事件可以注册多个监听器去处理。
3一个事件监听器可以同时监听多个事件源抛出的事件。


事件对象继承自EventObject类，并可以通过getSource()方法获得事件源对象，当然需要在构造事件对象时将事件源对象传入,来区分是哪个事件源发出的事件，所以要用事件对象作为参数。

事件源，事件对象，监听接口，在java.awt包中提供了很多已经定义好的，只需要实现监听接口就好了。