一、线程的概念
进程：每个独立执行，完成一个独立任务的应用程序
线程：是在进程中并发的一个顺序的执行流程，每个线程相当于完成一个独立功能的一条主线
多进程：划分时间片，宏观上并行，微观上串行
多线程：cpu在进程内部再划分时间片


二、创建多线程的程序
实现Runnable接口
继承Thread类

三、线程三大要素
代码、数据、CPU
CPU：线程调度机制、时间片 
代码：决定线程做什么
数据：对谁做操作


四、多线程分类
1、不共享代码、不共享数据
2、共享代码、不共享数据
3、不共享代码，共享数据
4、共享代码，共享数据


五、线程状态图



六、Thread类常用方法
getId()
getName()
setName()
sleep()
yield()
getPriority()

setPriority()


七、共享数据，不共享代码的情况

八、共享数据，共享代码的情况
订票程序：扣帐户 钱，把剩余座位数减1，加积分 
A 1 张机票   扣钱了，把剩余座位数减1，-1，
B 1张机票，扣钱了，把剩余座位数减1，剩下0张票，加积分

锁标记  ：每个对象都有一个锁标记，并且是唯一的
锁池：每产生一个对象的时候，系统自动维护一个锁池 。对象池 
阻塞池：系统池，整个系统只有一个

synchronized 把一个代码块对一个对象加锁

synchronized(o){	
}
只有拿到o的锁标记的线程，才能进入同步代码块，当线程离开同步代码块时，一定会释放锁标记

线程如果要进入同步代码块，却拿不到锁标记，会阻塞在该对象的锁池中
一个线程阻塞在锁池中的时候，不会释放已经拥有的其他锁标记


synchronized修饰方法：同步方法：在整个方法的范围内 ，对this加锁
例如：m方法是同步的，哪个线程能够拿到对象的锁标记，哪个线程能够调用m方法


九、线程的特点
每个线程都有被执行的机会
当有复杂运算、深度运算的时候，要很长时间，一直占用CPU资源，一般会用多线程来实现。






